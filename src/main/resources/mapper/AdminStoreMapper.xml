<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.HiMade.admin.mapper.AdminStoreMapper">


    <select id="getNoticeList" resultType="com.example.HiMade.admin.dto.storeNoticeDTO">
        select *
        from store_notice
        where  (status = 'Y' or status = 'D')
        and store_no = #{storeNo}
        order by notice_no desc

    </select>
<!-- 스토어 넘버 변경 -->
    <insert id="setNotice" parameterType="com.example.HiMade.admin.dto.storeNoticeDTO">
        INSERT INTO store_notice (
        notice_regdate,
        notice_content,
        notice_type,
        store_no
        ) VALUES (
        NOW(),
        #{noticeContent},
        #{noticeType},
        #{storeNo}
        );
    </insert>

    <update id="setNoticeModi" parameterType="com.example.HiMade.admin.dto.storeNoticeDTO">
        update store_notice
        set notice_content =  #{noticeContent}
        ,notice_regdate = now()
        ,notice_type = #{noticeType}
        ,modi = 'Y'
        where notice_no = #{noticeNo}
    </update>

    <update id="setNoticeStatus" parameterType="com.example.HiMade.admin.dto.storeNoticeDTO">
        update store_notice
        set status = #{status}
        where notice_no = #{noticeNo}
    </update>

    <select id="getNoticeDetail" resultType="com.example.HiMade.admin.dto.storeNoticeDTO">
        select * from store_notice where notice_no = #{id}
    </select>

    <!-- 계정관리(가입,로그인,마이페이지)  -->
    <select id="loginCheck" resultType="com.example.HiMade.admin.dto.StoreRegistDTO">
        select * from store
        where store_id = #{id} and store_pw = #{pw}
    </select>

    <select id="duplicatedId" resultType="Integer">
        select count(*) from store
        where store_id = #{storeId}
    </select>

    <insert id="registStore" parameterType="com.example.HiMade.admin.dto.StoreRegistDTO" useGeneratedKeys="true" keyProperty="storeNo">
        insert into store (
            store_id,
            store_pw,
            store_cate,
            store_name,
            store_master,
            manager_name,
            manager_phone,
            store_business_no,
            store_signup,
            store_status,
            zipcode,
            addr,
            addrdetail
        ) values (
            #{storeId},
            #{storePw},
            #{storeCate},
            #{storeName},
            #{storeMaster},
            #{managerName},
            #{managerPhone},
            #{storeBusinessNo},
            now(),
            '대기',
            #{zipcode},
            #{addr},
            #{addrdetail}
        )
        returning store_no as storeNo
    </insert>

<!--  아이디/비번 찾기  -->
    <select id="findAdminId" resultType="string">
        select store_id
        from store
        where manager_name = #{managerName} and store_business_no = #{storeBusinessNo}
    </select>

    <select id="findAdminPw" resultType="int">
        select count(*)
        from store
        where store_id = #{storeId} and store_business_no = #{storeBusinessNo}
    </select>

    <update id="updatePw">
        update store
        set store_pw = #{newPw}
        where store_id = #{storeId} and store_business_no = #{storeBusinessNo}
    </update>

    <insert id="insertDay" parameterType="com.example.HiMade.admin.dto.DayOffDay">
        insert into day_off_day(store_no, day_off_fix_status, day_off_day)
        values (#{storeNo}, #{dayOffFixStatus}, #{dayOffDay});
    </insert>

    <update id="updateStoreInfo" parameterType="com.example.HiMade.admin.dto.StoreRegistDTO">
        update store
        set
            store_pw = #{storePw},
            store_cate = #{storeCate},
            store_name = #{storeName},
            store_master = #{storeMaster},
            manager_name = #{managerName},
            manager_phone = #{managerPhone},
            zipcode = #{zipcode},
            addr = #{addr},
            addrdetail = #{addrdetail},
            store_business_no = #{storeBusinessNo}
        where store_no = #{storeNo}
    </update>


<!--  가게관리  -->
    <update id="updateStore" parameterType="com.example.HiMade.admin.dto.StoreRegistDTO">
        update store
        set
            store_intro = #{storeIntro},
            store_notice = #{storeNotice},
            store_open_time = #{storeOpenTime},
            store_close_time = #{storeCloseTime},
            store_parking_yn = #{storeParkingYn},
            account_bank = #{accountBank},
            account_number = #{accountNumber},
            store_status = #{storeStatus}
        where store_no = #{storeNo}
    </update>

<!-- sns입력 -->
    <delete id="deleteStoreSns" parameterType="com.example.HiMade.admin.dto.StoreSnsDTO">
        delete from store_sns_link
        where store_no = #{storeNo}
        <if test="storeSns != null and storeSns.size() > 0">
            and sns_link not in
            <foreach item="snsLink" collection="storeSns" open="(" separator="," close=")">
                 #{snsLink.snsLink}
            </foreach>
        </if>
    </delete>

    <select id="selectExistingSns" parameterType="Long" resultType="string">
        select sns_link
        from store_sns_link
        where store_no = #{storeNo}
    </select>

    <insert id="addStoreSns" parameterType="com.example.HiMade.admin.dto.StoreSnsDTO">
        insert into store_sns_link
        values (#{snsLink}, #{snsName}, #{storeNo})
    </insert>

<!-- img입력 -->
<!-- data != DB면 (DB에서 delete & data insert) -->
    <delete id="deleteStoreImg" parameterType="com.example.HiMade.admin.dto.StoreImgDTO">
        DELETE FROM store_img
        WHERE store_no = #{storeNo}
        <if test="storeImgList != null and storeImgList.size() > 0">
            AND store_img_location NOT IN
            <foreach item="img" collection="storeImgList" open="(" separator="," close=")">
                #{img.storeImgLocation}
            </foreach>
        </if>
    </delete>

    <select id="selectExistingStoreImg" resultType="string" parameterType="Long">
        SELECT store_img_location
        FROM store_img
        WHERE store_no = #{storeNo}
    </select>

    <insert id="addStoreImg" parameterType="com.example.HiMade.admin.dto.StoreImgDTO">
        insert into store_img (store_img_location, store_no)
        values (#{storeImgLocation}, #{storeNo})
    </insert>

    <select id="getMyStore" resultMap="storeRegistResultMap">
        SELECT
        sa.*,
        sns.*,
        img.store_img_location
        FROM store sa
        LEFT JOIN store_sns_link sns ON sa.store_no = sns.store_no
        LEFT JOIN store_img img ON sa.store_no = img.store_no
        WHERE sa.store_no = #{storeNo}
    </select>

    <resultMap id="storeRegistResultMap" type="com.example.HiMade.admin.dto.StoreRegistDTO">
        <result property="storeId" column="store_id"/>
        <result property="storeNo" column="store_no"/>
        <result property="storePw" column="store_pw"/>
        <result property="storeCate" column="store_cate"/>
        <result property="storeName" column="store_name"/>
        <result property="storeMaster" column="store_master"/>
        <result property="managerName" column="manager_name"/>
        <result property="managerPhone" column="manager_phone"/>
        <result property="zipcode" column="zipcode"/>
        <result property="addr" column="addr"/>
        <result property="addrdetail" column="addrdetail"/>
        <result property="storeBusinessNo" column="store_business_no"/>
        <result property="storeIntro" column="store_intro"/>
        <result property="storeParkingYn" column="store_parking_yn"/>
        <result property="storeNotice" column="store_notice"/>
        <result property="storeOpenTime" column="store_open_time"/>
        <result property="storeCloseTime" column="store_close_time"/>
        <result property="accountBank" column="account_bank"/>
        <result property="accountNumber" column="account_number"/>
        <result property="storeSignup" column="store_signup"/>
        <result property="storeStatus" column="store_status"/>

        <!-- SNS 매핑 -->
        <collection property="storeSns" ofType="com.example.HiMade.admin.dto.StoreSnsDTO">
            <result property="storeSnsNo" column="store_sns_no"/>
            <result property="snsLink" column="sns_link"/>
            <result property="snsName" column="sns_name"/>
            <result property="storeNo" column="store_no"/>
        </collection>

        <!-- img 매핑 -->
        <collection property="storeImg" ofType="com.example.HiMade.admin.dto.StoreImgDTO" javaType="java.util.List">
            <result property="storeImgNo" column="store_img_no"/>
            <result property="storeImgLocation" column="store_img_location"/>
            <result property="storeNo" column="store_no"/>
        </collection>
    </resultMap>

    <select id="getOffDay" resultType="string">
        select day_off_day
        from day_off_day
        where store_no = #{storeNo} and day_off_fix_status = 'Y'
    </select>

    <select id="getOffSet" resultType="com.example.HiMade.admin.dto.DayOffSet">
        select day_off_start, day_off_end, set_no
        from day_off_set
        where store_no = #{storeNo}
    </select>

    <update id="updateDay" parameterType="com.example.HiMade.admin.dto.StoreRegistDTO">
        <!-- 휴무가 아닌 경우 상태를 'N'으로 업데이트 -->
        update day_off_day
        set day_off_fix_status = 'N'
        where store_no = #{storeNo}
        and day_off_day NOT IN
        <foreach item="dayOffDay" collection="dayOffDayList" open="(" separator="," close=")">
            #{dayOffDay.dayOffDay}
        </foreach>;

        <!-- 휴무인 경우 상태를 'Y'로 업데이트 -->
        <foreach item="dayOffDay" collection="dayOffDayList">
            update day_off_day
            set day_off_fix_status = 'Y'
            where store_no = #{storeNo}
            and day_off_day = #{dayOffDay.dayOffDay};
        </foreach>
    </update>

    <insert id="registDayOffSet" parameterType="com.example.HiMade.admin.dto.DayOffSet">
        insert into day_off_set(day_off_start, day_off_end, store_no)
        values(#{dayOffStart}, #{dayOffEnd}, #{storeNo})
    </insert>

    <delete id="deleteOffSet" parameterType="Long">
        delete from day_off_set
        where store_no = #{storeNo} and set_no = #{setNo} and day_off_end &gt; now()
    </delete>

    <select id="getReviewCount" resultType="Integer">
        select count(*)
        from review
        join reservation reserve on reserve.reservation_no = review.reservation_no
        where reserve.store_no = #{storeNo}
    </select>

    <select id="getCancledCount" resultType="Integer">
        select count(*)
        from reservation
        where store_no = #{storeNo} and reservation_status = '취소 (null)';
    </select>


</mapper>
